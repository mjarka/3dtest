{"version":3,"sources":["Model.js","Threecanvas.js","App.js","reportWebVitals.js","index.js"],"names":["Model","props","group","useRef","useGLTF","nodes","materials","ref","dispose","castShadow","receiveShadow","geometry","Sphere","material","position","rotation","Math","PI","scale","head_lowPolyTest","defaultMat","preload","Threecanvas","intensity","fallback","OrbitControls","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAOe,SAASA,EAAMC,GAC5B,IAAMC,EAAQC,mBADqB,EAENC,YAAQ,cAA7BC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,UACf,OACE,gDAAOC,IAAKL,GAAWD,GAAvB,IAA8BO,QAAS,KAAvC,UACE,sBACEC,YAAU,EACVC,eAAa,EACbC,SAAUN,EAAMO,OAAOD,SACvBE,SAAUP,EAAU,gBACpBQ,SAAU,EAAE,IAAM,MAAQ,MAC1BC,SAAU,CAACC,KAAKC,GAAK,EAAG,EAAG,GAC3BC,MAAO,CAAC,KAAO,KAAO,QAExB,sBACET,YAAU,EACVC,eAAa,EACbC,SAAUN,EAAMc,iBAAiBR,SACjCE,SAAUP,EAAUc,WACpBN,SAAU,EAAE,MAAQ,MAAQ,MAC5BC,SAAU,CAACC,KAAKC,GAAK,EAAG,EAAG,GAC3BC,MAAO,CAAC,MAAO,MAAO,aAM9Bd,IAAQiB,QAAQ,c,YC7BD,SAASC,IACtB,OACE,eAAC,IAAD,WACE,8BAAcC,UAAW,KACzB,2BAAWA,UAAW,GAAKT,SAAU,CAAC,EAAG,GAAI,MAC7C,cAAC,WAAD,CAAUU,SAAU,KAApB,SACE,cAACxB,EAAD,UACE,6CAGJ,cAACyB,EAAA,EAAD,OCJSC,MARf,WACE,OACE,mCACE,cAACJ,EAAD,OCMSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.61cb5955.chunk.js","sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from \"react\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\n\r\nexport default function Model(props) {\r\n  const group = useRef();\r\n  const { nodes, materials } = useGLTF(\"/test.gltf\");\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Sphere.geometry}\r\n        material={materials[\"Material.001\"]}\r\n        position={[-0.31, 0.292, -0.118]}\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        scale={[0.125, 0.125, 0.125]}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.head_lowPolyTest.geometry}\r\n        material={materials.defaultMat}\r\n        position={[-0.014, -0.063, -0.475]}\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        scale={[8.874, 8.874, 8.874]}\r\n      />\r\n    </group>\r\n  );\r\n}\r\n\r\nuseGLTF.preload(\"/test.gltf\");\r\n","import React, { Suspense } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\n\r\nimport Model from \"./Model\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nexport default function Threecanvas() {\r\n  return (\r\n    <Canvas>\r\n      <ambientLight intensity={0.7} />\r\n      <spotLight intensity={0.7} position={[5, 20, 20]} />\r\n      <Suspense fallback={null}>\r\n        <Model>\r\n          <meshStandardMaterial />\r\n        </Model>\r\n      </Suspense>\r\n      <OrbitControls />\r\n    </Canvas>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Threecanvas from \"./Threecanvas\";\n\nfunction App() {\n  return (\n    <>\n      <Threecanvas />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}